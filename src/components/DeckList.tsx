import React, { useMemo, useState } from 'react'
import { AlertCircle, CheckCircle, Edit3, Trash2, Cloud, HardDrive } from 'lucide-react'
import DeckCard from './DeckCard'
import { validateDeck, calculateDeckStats } from '@/utils/deckValidation'
import { useConvexDecks } from '@/hooks/useConvexDecks'
import { useConvexDeckStore } from '@/stores/convexDeckStore'
import { useReikiStore } from '@/stores/reikiStore'
import type { Card, DeckCardEntry } from '@/types/card'

interface DeckListProps {
  cards: Card[]
  deckCards: Record<string, number>
  deckName: string
  onCardAdd: (card: Card) => void
  onCardRemove: (cardId: string) => void
  onCardSetCount: (cardId: string, count: number) => void
  onDeckNameChange: (name: string) => void
  onSaveDeck: () => void
  onClearDeck: () => void
}

const DeckList: React.FC<DeckListProps> = ({
  cards,
  deckCards,
  deckName,
  onCardAdd,
  onCardRemove,
  onCardSetCount,
  onDeckNameChange,
  onSaveDeck,
  onClearDeck
}) => {
  // ConvexÁµ±Âêà
  const { decks, saveDeck: saveToConvex, isLoading, deleteDeck: deleteFromConvex } = useConvexDecks()
  const { useServerStorage, enableServerStorage, disableServerStorage } = useConvexDeckStore()
  const { cards: reikiCards } = useReikiStore()
  
  // UIÁä∂ÊÖã
  const [convexMessage, setConvexMessage] = useState('')
  const [isConvexProcessing, setIsConvexProcessing] = useState(false)
  // „Éá„ÉÉ„Ç≠ÂÜÖ„ÅÆ„Ç´„Éº„Éâ‰∏ÄË¶ß„ÇíÁîüÊàê
  const deckCardEntries: DeckCardEntry[] = useMemo(() => {
    const cardMap = new Map(cards.map(card => [card.cardId, card]))
    
    return Object.entries(deckCards)
      .map(([cardId, count]) => {
        const card = cardMap.get(cardId)
        if (card) {
          return { card, count }
        }
        return null
      })
      .filter((entry): entry is DeckCardEntry => entry !== null)
      .sort((a, b) => {
        // „Åæ„Åö„Ç≥„Çπ„Éà„Åß„ÇΩ„Éº„Éà„ÄÅÊ¨°„Å´ÂêçÂâç„Åß„ÇΩ„Éº„Éà
        if (a.card.cost !== b.card.cost) {
          return a.card.cost - b.card.cost
        }
        return a.card.name.localeCompare(b.card.name)
      })
  }, [cards, deckCards])

  // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÁµêÊûú
  const validation = useMemo(() => {
    return validateDeck(deckCards, cards)
  }, [deckCards, cards])

  // Áµ±Ë®àÊÉÖÂ†±
  const stats = useMemo(() => {
    return calculateDeckStats(deckCards, cards)
  }, [deckCards, cards])

  const [isEditingName, setIsEditingName] = React.useState(false)
  const [editName, setEditName] = React.useState(deckName)

  const handleNameEdit = () => {
    setEditName(deckName)
    setIsEditingName(true)
  }

  const handleNameSave = () => {
    onDeckNameChange(editName.trim() || 'New Deck')
    setIsEditingName(false)
  }

  const handleNameCancel = () => {
    setEditName(deckName)
    setIsEditingName(false)
  }

  // Convex‰øùÂ≠òÊ©üËÉΩ
  const handleConvexSave = async () => {
    if (!deckName.trim()) {
      setConvexMessage('‚ùå „Éá„ÉÉ„Ç≠Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
      return
    }

    setIsConvexProcessing(true)
    setConvexMessage('üíæ „Çµ„Éº„Éê„Éº„Å´‰øùÂ≠ò‰∏≠...')

    try {
      const result = await saveToConvex({
        name: deckName,
        description: `Áµ±Âêà„Éá„ÉÉ„Ç≠ - ${new Date().toLocaleDateString()}`,
        mainCards: deckCards,
        reikiCards: reikiCards.map(card => ({
          color: card.color,
          count: card.count
        })),
        tags: ['„É°„Ç§„É≥„Éì„É´„ÉÄ„Éº'],
        isPublic: false
      })

      if (result.success) {
        setConvexMessage(`‚úÖ „Çµ„Éº„Éê„Éº‰øùÂ≠òÊàêÂäüÔºÅ`)
        enableServerStorage()
      } else {
        setConvexMessage(`‚ùå ‰øùÂ≠òÂ§±Êïó: ${result.error}`)
      }
    } catch (error) {
      setConvexMessage(`‚ùå „Ç®„É©„Éº: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
      setIsConvexProcessing(false)
    }
  }

  const handleToggleStorage = () => {
    if (useServerStorage) {
      disableServerStorage()
      setConvexMessage('üì± „É≠„Éº„Ç´„É´‰øùÂ≠ò„Å´Âàá„ÇäÊõø„Åà„Åæ„Åó„Åü')
    } else {
      enableServerStorage()
      setConvexMessage('‚òÅÔ∏è „Çµ„Éº„Éê„Éº‰øùÂ≠ò„Å´Âàá„ÇäÊõø„Åà„Åæ„Åó„Åü')
    }
  }

  const getColorName = (color: string) => {
    const colorNames: Record<string, string> = {
      red: 'Ëµ§',
      blue: 'Èùí',
      green: 'Á∑ë',
      yellow: 'ÈªÑ',
      colorless: 'ÁÑ°Ëâ≤'
    }
    return colorNames[color] || color
  }

  return (
    <div className="space-y-6">
      {/* „Éá„ÉÉ„Ç≠„Éò„ÉÉ„ÉÄ„Éº */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            {isEditingName ? (
              <div className="flex items-center space-x-2">
                <input
                  type="text"
                  value={editName}
                  onChange={(e) => setEditName(e.target.value)}
                  className="text-xl font-bold border border-gray-300 rounded px-2 py-1 focus:ring-blue-500 focus:border-blue-500"
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') handleNameSave()
                    if (e.key === 'Escape') handleNameCancel()
                  }}
                  autoFocus
                />
                <button
                  onClick={handleNameSave}
                  className="p-1 text-green-600 hover:text-green-700"
                >
                  <CheckCircle className="w-5 h-5" />
                </button>
              </div>
            ) : (
              <div className="flex items-center space-x-2">
                <h2 className="text-xl font-bold text-gray-900">{deckName}</h2>
                <button
                  onClick={handleNameEdit}
                  className="p-1 text-gray-400 hover:text-gray-600"
                >
                  <Edit3 className="w-4 h-4" />
                </button>
              </div>
            )}
          </div>

          <div className="flex items-center space-x-2">
            {/* „Çπ„Éà„É¨„Éº„Ç∏Âàá„ÇäÊõø„Åà„Éú„Çø„É≥ */}
            <button
              onClick={handleToggleStorage}
              className={`flex items-center space-x-1 px-2 py-1 text-xs rounded border transition-colors ${
                useServerStorage 
                  ? 'bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100'
                  : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100'
              }`}
            >
              {useServerStorage ? <Cloud className="w-3 h-3" /> : <HardDrive className="w-3 h-3" />}
              <span>{useServerStorage ? '„Çµ„Éº„Éê„Éº' : '„É≠„Éº„Ç´„É´'}</span>
            </button>

            {/* ‰øùÂ≠ò„Éú„Çø„É≥ */}
            {useServerStorage ? (
              <button
                onClick={handleConvexSave}
                disabled={!validation.isValid || isConvexProcessing || !deckName.trim()}
                className="flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Cloud className="w-4 h-4" />
                <span>{isConvexProcessing ? '‰øùÂ≠ò‰∏≠...' : '„Çµ„Éº„Éê„Éº‰øùÂ≠ò'}</span>
              </button>
            ) : (
              <button
                onClick={onSaveDeck}
                disabled={!validation.isValid}
                className="flex items-center space-x-2 px-3 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <HardDrive className="w-4 h-4" />
                <span>„É≠„Éº„Ç´„É´‰øùÂ≠ò</span>
              </button>
            )}
            
            <button
              onClick={onClearDeck}
              className="flex items-center space-x-2 px-3 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
            >
              <Trash2 className="w-4 h-4" />
              <span>„ÇØ„É™„Ç¢</span>
            </button>
          </div>
        </div>

        {/* „Éá„ÉÉ„Ç≠Áµ±Ë®à */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div className="text-center">
            <div className="text-2xl font-bold text-gray-900">{stats.totalCards}</div>
            <div className="text-gray-600">Á∑èÊûöÊï∞</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-gray-900">{stats.averageCost}</div>
            <div className="text-gray-600">Âπ≥Âùá„Ç≥„Çπ„Éà</div>
          </div>
          
          <div className="text-center">
            <div className="text-2xl font-bold text-gray-900">
              {Object.keys(stats.colorDistribution).length}
            </div>
            <div className="text-gray-600">‰ΩøÁî®Ëâ≤Êï∞</div>
          </div>
          
          <div className="text-center">
            <div className="flex items-center justify-center">
              {validation.isValid ? (
                <CheckCircle className="w-6 h-6 text-green-500" />
              ) : (
                <AlertCircle className="w-6 h-6 text-red-500" />
              )}
            </div>
            <div className="text-gray-600">„Çπ„ÉÜ„Éº„Çø„Çπ</div>
          </div>
        </div>
      </div>

      {/* „Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÁµêÊûú */}
      {(validation.errors.length > 0 || validation.warnings.length > 0) && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          {validation.errors.length > 0 && (
            <div className="mb-3">
              <h3 className="text-sm font-semibold text-red-800 mb-2 flex items-center">
                <AlertCircle className="w-4 h-4 mr-1" />
                „Ç®„É©„Éº
              </h3>
              <ul className="text-sm text-red-700 space-y-1">
                {validation.errors.map((error, index) => (
                  <li key={index}>‚Ä¢ {error}</li>
                ))}
              </ul>
            </div>
          )}
          
          {validation.warnings.length > 0 && (
            <div>
              <h3 className="text-sm font-semibold text-yellow-800 mb-2 flex items-center">
                <AlertCircle className="w-4 h-4 mr-1" />
                Ë≠¶Âëä
              </h3>
              <ul className="text-sm text-yellow-700 space-y-1">
                {validation.warnings.map((warning, index) => (
                  <li key={index}>‚Ä¢ {warning}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}

      {/* Convex„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫ */}
      {convexMessage && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="p-3 bg-blue-50 rounded border border-blue-200">
            <p className="text-sm text-blue-800">{convexMessage}</p>
          </div>
        </div>
      )}

      {/* „Çµ„Éº„Éê„Éº‰øùÂ≠òÊ∏à„Åø„Éá„ÉÉ„Ç≠‰∏ÄË¶ß */}
      {useServerStorage && !isLoading && decks && decks.length > 0 && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <Cloud className="w-5 h-5 mr-2 text-blue-600" />
            „Çµ„Éº„Éê„Éº‰øùÂ≠òÊ∏à„Åø„Éá„ÉÉ„Ç≠ ({decks.length}ÂÄã)
          </h3>
          <div className="space-y-2 max-h-40 overflow-y-auto">
            {decks.map((deck) => (
              <div key={deck._id} className="p-3 bg-gray-50 rounded border hover:bg-gray-100 transition-colors">
                <div className="flex justify-between items-center">
                  <div>
                    <div className="font-medium text-gray-900">{deck.name}</div>
                    <div className="text-sm text-gray-600">
                      „É°„Ç§„É≥: {deck.totalMainCards}Êûö | „É¨„Ç§„Ç≠: {deck.totalReikiCards}Êûö | 
                      ‰ΩúÊàê: {new Date(deck.createdAt).toLocaleDateString()}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => {/* TODO: Ë™≠„ÅøËæº„ÅøÊ©üËÉΩ */}}
                      className="text-blue-600 hover:text-blue-700 text-sm px-2 py-1 rounded border border-blue-200 hover:bg-blue-50"
                    >
                      Ë™≠„ÅøËæº„Åø
                    </button>
                    <button
                      onClick={() => deleteFromConvex(deck._id)}
                      className="text-red-600 hover:text-red-700 text-sm px-2 py-1 rounded border border-red-200 hover:bg-red-50"
                    >
                      ÂâäÈô§
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Ëâ≤ÂàÜÂ∏É */}
      {stats.totalCards > 0 && (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <h3 className="text-lg font-semibold text-gray-900 mb-3">Ëâ≤ÂàÜÂ∏É</h3>
          <div className="grid grid-cols-5 gap-3">
            {Object.entries(stats.colorDistribution).map(([color, count]) => (
              <div key={color} className="text-center">
                <div className={`w-6 h-6 rounded-full mx-auto mb-1 ${
                  color === 'red' ? 'bg-red-500' :
                  color === 'blue' ? 'bg-blue-500' :
                  color === 'green' ? 'bg-green-500' :
                  color === 'yellow' ? 'bg-yellow-500' :
                  'bg-gray-400'
                }`} />
                <div className="text-sm font-medium">{count}</div>
                <div className="text-xs text-gray-600">{getColorName(color)}</div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* „Éá„ÉÉ„Ç≠‰∏ÄË¶ß */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          „Éá„ÉÉ„Ç≠ÂÜÖÂÆπ ({deckCardEntries.length}Á®ÆÈ°û)
        </h3>
        
        {deckCardEntries.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <div className="text-4xl mb-2">üÉè</div>
            <p>„Éá„ÉÉ„Ç≠„Å´„Ç´„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
            <p className="text-sm">Â∑¶ÂÅ¥„Åã„Çâ„Ç´„Éº„Éâ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
          </div>
        ) : (
          <div className="space-y-2">
            {deckCardEntries.map(({ card, count }) => (
              <DeckCard
                key={card.cardId}
                card={card}
                count={count}
                onAdd={onCardAdd}
                onRemove={onCardRemove}
                onSetCount={onCardSetCount}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  )
}

export default DeckList